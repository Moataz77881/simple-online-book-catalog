// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using simple_online_book_catalog.Data;

#nullable disable

namespace simple_online_book_catalog.Migrations
{
    [DbContext(typeof(SimOnBookDbContext))]
    [Migration("20240305161044_SimOnlineBookMigration")]
    partial class SimOnlineBookMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("simple_online_book_catalog.Models.Authors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoOfTheAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("simple_online_book_catalog.Models.Books", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("authorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("genresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("imageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("imageOfBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numberOfPages")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("authorId");

                    b.HasIndex("genresId");

                    b.HasIndex("imageId")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("simple_online_book_catalog.Models.Genres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("genresOfTheBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("simple_online_book_catalog.models.DomainModel.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("bookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("fileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("fileSize")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("simple_online_book_catalog.Models.Books", b =>
                {
                    b.HasOne("simple_online_book_catalog.Models.Authors", "Authors")
                        .WithMany("Books")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_online_book_catalog.Models.Genres", "Genres")
                        .WithMany("Books")
                        .HasForeignKey("genresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_online_book_catalog.models.DomainModel.Image", "Image")
                        .WithOne("books")
                        .HasForeignKey("simple_online_book_catalog.Models.Books", "imageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authors");

                    b.Navigation("Genres");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("simple_online_book_catalog.Models.Authors", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("simple_online_book_catalog.Models.Genres", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("simple_online_book_catalog.models.DomainModel.Image", b =>
                {
                    b.Navigation("books")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
